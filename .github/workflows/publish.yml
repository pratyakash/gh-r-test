name: Release-Tag

on:
  push:
    branches:
      - main

jobs:
  publish-gpr:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
    steps:
      - name: Check if Push Is a Merge
        id: check_merge
        run: |
          if [[ "$(git log --merges -1 --pretty=%H)" == "$(git rev-parse HEAD)" ]]; then
            echo "This push is a merge commit."
            echo "::set-output name=is_merge::true"
          else
            echo "This push is not a merge commit."
            echo "::set-output name=is_merge::false"
          fi

      - name: Checkout code
        uses: actions/checkout@v2.3.4
        env:
          NODE_AUTH_TOKEN: ${{secrets.GIT_TOKEN}}
          NPM_AUTH_TOKEN: ${{secrets.GIT_TOKEN}}

      - name: Setup Node.js
        if: steps.check_merge.outputs.is_merge == 'true'
        uses: actions/setup-node@v2
        with:
          always-auth: true
          node-version: '20.x'
          registry-url: https://npm.pkg.github.com/

      - name: List Releases
        id: list_releases
        run: |
          echo "releases=$(curl -s -H 'Accept: application/vnd.github.v3+json' \
            https://api.github.com/repos/${{ github.repository }}/releases | jq -r '.[].tag_name')" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      - name: Check if Release Exists
        run: |
          VERSION=$(node -pe "require('./package.json').version")
          releases=$(echo "${{ steps.list_releases.outputs.releases }}")
          if [[ "$releases" == *"${VERSION}"* ]]; then
            echo "Release ${release_to_check} exists!"
            exit 1
          else
            echo "Release ${release_to_check} does not exist."
          fi

      - name: Install dependencies
        if: steps.check_merge.outputs.is_merge == 'true'
        run: yarn install --frozen-lockfile
        env:
          NODE_AUTH_TOKEN: ${{secrets.GIT_TOKEN}}

      - name: Release Tag
        if: success() && steps.check_merge.outputs.is_merge == 'true'
        run: |
          VERSION=$(node -pe "require('./package.json').version")
          git tag "$VERSION"
          git push origin ${{ github.ref }} --tags
          echo "TAG_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using TAG_VERSION: $VERSION"

      - name: Release GH
        if: success() && steps.check_merge.outputs.is_merge == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.TAG_VERSION }}
          generateReleaseNotes: true
